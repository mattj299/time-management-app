{"version":3,"sources":["components/Navbar/Navbar.js","components/TimelineAndForm/TimelineAndForm.js","components/Tips/Tips.js","components/Footer/Footer.js","App.js","index.js"],"names":["Navbar","darkTheme","onThemeChange","useState","currentTime","setcurrentTime","activeNavbar","setActiveNavbar","closeNav","useEffect","current","Date","toLocaleTimeString","timer","setInterval","clearInterval","theme","bodyElem","document","getElementsByTagName","className","classList","add","to","onClick","name","onChange","type","INITIAL_DATA_STATE","labels","hours","indexOfActiveDataset","INITIAL_PRESET_STATE","presetNames","changePresetName","indexOfNameChanging","inputNameChangeValue","Form","data","setData","minimize","setMinimize","hide","setHide","setPresetNames","localPresetData","localStorage","getItem","parsedData","JSON","parse","currentlyActivePreset","getElementsByClassName","remove","changesToLocalStorage","presetData","setItem","stringify","onPresetNameChangeSubmit","e","newPresetNames","map","presetName","index","toastifyNotification","notificationText","toast","autoClose","clearWaitingQueue","onActivitiesChange","newValue","target","value","newData","dataItem","indexOfItem","newLabels","newHours","onFormSubmit","preventDefault","onSubmit","preset","presetActiveFirstItem","content","arrow","ind","currentlyActive","newActive","activePreset","onDoubleClick","onPresetNameDoubleClick","autoComplete","key","style","position","display","alignItems","justifyContent","presetsLength","length","newPresetName","newPresets","push","addPreset","window","confirm","filter","nameIndex","splice","removeActivePreset","marginTop","label","required","onKeyPress","formInputRowChildern","closest","parentNode","children","formLabelValue","formHourValue","currentLabel","currentHour","hour","updatedLabels","updatedHours","removeSpecificActivity","limit","addActivity","resetActivites","CustomizeDataColor","TimelineAndForm","localData","Timeline","finalItem","AMtruePMfalse","hourInt","parseInt","minutesTens","charAt","minutesOnes","timelineDotColor","TimelineItem","TimelineOppositeContent","TimelineSeparator","TimelineDot","color","variant","TimelineConnector","TimelineContent","FrequentlyAskedItem","question","answer","selected","setSelected","selectedFalse","addEventListener","removeEventListener","Provider","event","faqItem","faqItemHeader","faqItemExtend","querySelector","headerHeight","offsetHeight","extendHeight","height","extendedHeight","changeSelected","Tips","setFaqHeight","i","Footer","App","setTheme","basename","exact","path","element","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7801ae81.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { FaBars } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./styles.scss\";\r\n\r\nfunction Navbar({ darkTheme, onThemeChange }) {\r\n  const [currentTime, setcurrentTime] = useState(\"00:00:00 AM\");\r\n  const [activeNavbar, setActiveNavbar] = useState(false);\r\n\r\n  const toggleNav = () => {\r\n    setActiveNavbar(!activeNavbar);\r\n  };\r\n\r\n  const closeNav = () => {\r\n    setActiveNavbar(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const current = new Date().toLocaleTimeString();\r\n    const timer = setInterval(() => setcurrentTime(current), 1000);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [currentTime]);\r\n\r\n  useEffect(() => {\r\n    const theme = darkTheme ? \"dark\" : \"light\";\r\n\r\n    const bodyElem = document.getElementsByTagName(\"body\")[0];\r\n\r\n    bodyElem.className = \"\";\r\n    bodyElem.classList.add(`theme-${theme}`);\r\n  }, [darkTheme]);\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"navbar-no-switch-content\">\r\n        <div\r\n          className={\r\n            activeNavbar\r\n              ? \"navbar-menu-items navbar-active \"\r\n              : \"navbar-menu-items\"\r\n          }\r\n        >\r\n          <div className=\"navbar-time navbar-top-content\">{currentTime}</div>\r\n          <Link to=\"/tips\">\r\n            <div className=\"navbar-tip navbar-top-content\" onClick={closeNav}>\r\n              Tips\r\n            </div>\r\n          </Link>\r\n        </div>\r\n        <div className=\"navbar-title-bars\">\r\n          <Link to=\"/\" onClick={closeNav}>\r\n            <div className=\"navbar-title navbar-top-content\">\r\n              Time Management\r\n            </div>\r\n          </Link>\r\n          <FaBars className=\"navbar-bars\" onClick={toggleNav} />\r\n        </div>\r\n      </div>\r\n\r\n      <label className=\"switch\">\r\n        <input name=\"navbar-switch\" onChange={onThemeChange} type=\"checkbox\" />\r\n        <div>\r\n          <span></span>\r\n        </div>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Timeline from \"@mui/lab/Timeline\";\r\nimport TimelineItem from \"@mui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@mui/lab/TimelineSeparator\";\r\nimport TimelineConnector from \"@mui/lab/TimelineConnector\";\r\nimport TimelineContent from \"@mui/lab/TimelineContent\";\r\nimport TimelineDot from \"@mui/lab/TimelineDot\";\r\nimport TimelineOppositeContent from \"@mui/lab/TimelineOppositeContent\";\r\n\r\nimport Tippy from \"@tippyjs/react\";\r\nimport \"tippy.js/dist/tippy.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { AiOutlineCheck, AiOutlineClose } from \"react-icons/ai\";\r\n\r\nimport \"./styles.scss\";\r\n\r\n// data set up as arrays in array\r\n// ex. const intitialState = {\r\n//  labels: [ [], [] ],\r\n// hours: [ [], [] ]\r\n// }\r\n\r\nconst INITIAL_DATA_STATE = {\r\n  labels: [\r\n    [\r\n      \"Wake up\",\r\n      \"Eat Breakfast\",\r\n      \"Study\",\r\n      \"Gym\",\r\n      \"Shower\",\r\n      \"Lunch\",\r\n      \"Study\",\r\n      \"Eat\",\r\n      \"Study\",\r\n      \"Eat\",\r\n      \"Sleep\",\r\n    ],\r\n    [\"Wake up\", \"Eat Breakfast\", \"Lunch\", \"Dinner\"],\r\n  ],\r\n  hours: [\r\n    [\r\n      \"07:00\",\r\n      \"07:30\",\r\n      \"08:00\",\r\n      \"10:00\",\r\n      \"12:00\",\r\n      \"12:15\",\r\n      \"13:00\",\r\n      \"15:30\",\r\n      \"16:00\",\r\n      \"19:00\",\r\n      \"22:30\",\r\n    ],\r\n    [\"10:00\", \"10:30\", \"15:00\", \"19:30\"],\r\n  ],\r\n\r\n  indexOfActiveDataset: 0,\r\n};\r\n\r\nfunction TimelineAndForm() {\r\n  const [data, setData] = useState({ ...INITIAL_DATA_STATE });\r\n\r\n  // call localStorage to get data and set to state\r\n  useEffect(() => {\r\n    const localData = localStorage.getItem(\"data\");\r\n\r\n    if (localData) {\r\n      setData(JSON.parse(localData));\r\n    }\r\n  }, []);\r\n\r\n  // states so user can minimize to make it more compact without scrolling to see everything or completely hide timeline, adds and removes classes for effect\r\n  const [minimize, setMinimize] = useState(false);\r\n  const [hide, setHide] = useState(false);\r\n\r\n  // index of the active dataset in order to display correct data based on what dataset is chosen\r\n  const indexOfActiveDataset = data.indexOfActiveDataset;\r\n\r\n  const minimizeTimeline = () => {\r\n    setHide(false);\r\n    setMinimize(!minimize);\r\n  };\r\n\r\n  const hideTimeline = () => {\r\n    setMinimize(false);\r\n    setHide(!hide);\r\n  };\r\n\r\n  return (\r\n    <div className=\"timeline-and-form\">\r\n      <div className=\"timeline-container\">\r\n        {hide ? (\r\n          <>\r\n            <p>Hidden...</p>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Timeline className=\"timeline\" position=\"alternate\">\r\n              {data &&\r\n                data.labels[indexOfActiveDataset].map((dataItem, index) => {\r\n                  // removes connector if it is the final item\r\n                  const finalItem =\r\n                    data.labels[indexOfActiveDataset].length - 1 === index;\r\n\r\n                  // if true the time is AM, false PM, displays accordingly\r\n                  let AMtruePMfalse = true;\r\n\r\n                  // hour turned into an integer so it can be subtracted by 12 if time is above or equal to 13:00 (ie. 1pm, 7pm, etc)\r\n                  let hourInt = parseInt(\r\n                    data.hours[indexOfActiveDataset][index]\r\n                  );\r\n\r\n                  // set hour to hour data and grabs minutes from the hour to display on the timeline\r\n                  const hour = data.hours[indexOfActiveDataset][index];\r\n                  const minutesTens = hour.charAt(hour.length - 2);\r\n                  const minutesOnes = hour.charAt(hour.length - 1);\r\n\r\n                  // if 12 (12pm) switch from am to pm\r\n                  if (hourInt === 12) {\r\n                    AMtruePMfalse = false;\r\n                  }\r\n\r\n                  // if 0 (12am) hourtInt is 12 and still am\r\n                  if (hourInt === 0) {\r\n                    hourInt = 12;\r\n                  }\r\n\r\n                  // if above or equal to 13 then subtract 12 to use normal time and not military time (ie 13 = 1pm)\r\n                  if (hourInt >= 13) {\r\n                    AMtruePMfalse = false;\r\n                    hourInt -= 12;\r\n                  }\r\n\r\n                  let timelineDotColor = \"\";\r\n\r\n                  if (index % 2 === 0) {\r\n                    timelineDotColor = \"primary\";\r\n                  } else {\r\n                    timelineDotColor = \"secondary\";\r\n                  }\r\n\r\n                  return (\r\n                    <TimelineItem\r\n                      className={\r\n                        minimize\r\n                          ? \"timeline-item minimize-timeline\"\r\n                          : \"timeline-item\"\r\n                      }\r\n                      key={index}\r\n                    >\r\n                      <TimelineOppositeContent className=\"timeline-opposite-content\">\r\n                        {hourInt}:{minutesTens}\r\n                        {minutesOnes} {AMtruePMfalse ? \"AM\" : \"PM\"}\r\n                      </TimelineOppositeContent>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot\r\n                          color={timelineDotColor}\r\n                          variant=\"outlined\"\r\n                        />\r\n                        {!finalItem && <TimelineConnector />}\r\n                      </TimelineSeparator>\r\n                      <TimelineContent className=\"timeline-content\">\r\n                        {data.labels[indexOfActiveDataset][index]}\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                  );\r\n                })}\r\n            </Timeline>\r\n          </>\r\n        )}\r\n\r\n        <p className=\"timeline-extras\">\r\n          <span\r\n            className=\"timeline-extra extra-minimize\"\r\n            onClick={minimizeTimeline}\r\n          >\r\n            {minimize ? \"Expand\" : \"Minimize\"}\r\n          </span>\r\n          |\r\n          <span className=\"timeline-extra extra-hide\" onClick={hideTimeline}>\r\n            {hide ? \"Display\" : \"Hide\"}\r\n          </span>\r\n        </p>\r\n      </div>\r\n\r\n      <Form data={data} setData={setData} />\r\n\r\n      <CustomizeDataColor />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst INITIAL_PRESET_STATE = {\r\n  presetNames: [\"Preset 1\", \"Preset 2\"],\r\n  changePresetName: false,\r\n  indexOfNameChanging: 0,\r\n  inputNameChangeValue: \"\",\r\n};\r\n\r\nfunction Form({ data, setData }) {\r\n  // index of the active dataset in order to display correct data based on what dataset is chosen\r\n  const indexOfActiveDataset = data.indexOfActiveDataset;\r\n\r\n  // states so user can minimize to make it more compact without scrolling to see everything or completely hide form, adds and removes classes for effect\r\n  const [minimize, setMinimize] = useState(false);\r\n  const [hide, setHide] = useState(false);\r\n\r\n  // preset names, user can change preset names by double clicking on preset buttons (changePresetName becomes true)\r\n  const [presetNames, setPresetNames] = useState(INITIAL_PRESET_STATE);\r\n\r\n  // gets localStorage and sets presetNames\r\n  useEffect(() => {\r\n    const localPresetData = localStorage.getItem(\"presetData\");\r\n\r\n    const parsedData = JSON.parse(localPresetData);\r\n\r\n    if (localPresetData) {\r\n      setPresetNames({\r\n        ...parsedData,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // ensures indexOfActiveDataset is always the data with preset-active class\r\n  useEffect(() => {\r\n    // if there is a currently active preset remove class preset-active and add it to first element with class timeline-preset to correspond with reseting presets\r\n    const currentlyActivePreset =\r\n      document.getElementsByClassName(\"preset-active\")[0];\r\n    if (currentlyActivePreset)\r\n      currentlyActivePreset.classList.remove(\"preset-active\");\r\n\r\n    const activePreset =\r\n      document.getElementsByClassName(\"timeline-preset\")[indexOfActiveDataset];\r\n    activePreset.classList.add(\"preset-active\");\r\n  }, [data.indexOfActiveDataset]);\r\n\r\n  // function which toggles states to either hide, display, minimize, or expand form\r\n  const minimizeForm = () => {\r\n    // useEffect changes class to first preset so this calls setData to change data from form to first preset whenever toggling minimize\r\n    setData({\r\n      ...data,\r\n      indexOfActiveDataset: 0,\r\n    });\r\n    setHide(false);\r\n    setMinimize(!minimize);\r\n  };\r\n\r\n  const hideForm = () => {\r\n    if (hide) {\r\n      // useEffect changes class to first preset so this calls setData to change data from form to first preset only when hide is true\r\n      setData({\r\n        ...data,\r\n        indexOfActiveDataset: 0,\r\n      });\r\n    }\r\n    setMinimize(false);\r\n    setHide(!hide);\r\n  };\r\n\r\n  // changes localStorage to whatever new values indicated in parameter. This gets called after every function it's needed as oppose to localStorage.setItem\r\n  const changesToLocalStorage = (data, presetData) => {\r\n    // resets localStorage to original data if data existed. If no data existed then add data\r\n    localStorage.setItem(\"data\", JSON.stringify({ ...data }));\r\n    localStorage.setItem(\"presetData\", JSON.stringify({ ...presetData }));\r\n  };\r\n\r\n  // gives preset that is clicked on the preset-active class\r\n  const activePreset = (e, index) => {\r\n    const currentlyActive = document.getElementsByClassName(\"preset-active\")[0];\r\n    // if currentlyActive doesn't exist end function\r\n    if (currentlyActive) currentlyActive.classList.remove(\"preset-active\");\r\n\r\n    const newActive = e.target;\r\n    // if newActive doesn't exist end function\r\n    if (newActive) newActive.classList.add(\"preset-active\");\r\n\r\n    // get index of item and set to indexOfActiveDataset to state of TimelineAndForm\r\n    setData({ ...data, indexOfActiveDataset: index });\r\n  };\r\n\r\n  const onPresetNameDoubleClick = (e, index) => {\r\n    setPresetNames({\r\n      ...presetNames,\r\n      changePresetName: true,\r\n      indexOfNameChanging: index,\r\n      inputNameChangeValue: presetNames.presetNames[index],\r\n    });\r\n  };\r\n\r\n  // runs when submitting input for preset name change\r\n  const onPresetNameChangeSubmit = (e) => {\r\n    // accesses state\r\n    const indexOfNameChanging = presetNames.indexOfNameChanging;\r\n    const inputNameChangeValue = presetNames.inputNameChangeValue;\r\n\r\n    // maps through state and checks if index matches index of one that's going to change, if matches change to new value otherwise return old value\r\n    const newPresetNames = presetNames.presetNames.map((presetName, index) => {\r\n      return index === indexOfNameChanging ? inputNameChangeValue : presetName;\r\n    });\r\n\r\n    // sets state to old state, updates presetNames and sets changePresetName to false to get rid of input\r\n    setPresetNames({\r\n      ...presetNames,\r\n      presetNames: newPresetNames,\r\n      changePresetName: false,\r\n      inputNameChangeValue: \"\",\r\n    });\r\n\r\n    changesToLocalStorage(\r\n      { ...data, indexOfActiveDataset: 0 },\r\n      {\r\n        ...presetNames,\r\n        presetNames: newPresetNames,\r\n        changePresetName: false,\r\n        inputNameChangeValue: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  // closes input to change preset name\r\n  const onPresetNameClose = () => {\r\n    setPresetNames({ ...presetNames, changePresetName: false });\r\n  };\r\n\r\n  // change text in input for input name change\r\n  const onPresetNameChange = (e) => {\r\n    setPresetNames({ ...presetNames, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const closeRenameMessage = () => {\r\n    setPresetNames({ ...presetNames });\r\n  };\r\n\r\n  const closeSaveMessage = () => {\r\n    setPresetNames({ ...presetNames });\r\n  };\r\n\r\n  const addPreset = (e) => {\r\n    // add new preset name to presetNames and update presetNames\r\n    const presetsLength = presetNames.presetNames.length + 1;\r\n\r\n    // user can only have 10 presets. Implemented in case user spams to create new presets\r\n    if (presetsLength > 10) {\r\n      toastifyNotification(\"Can only have a max of 10 presets!\");\r\n      return;\r\n    }\r\n\r\n    const newPresetName = \"Preset \" + presetsLength;\r\n    const newPresets = [...presetNames.presetNames];\r\n    newPresets.push(newPresetName);\r\n\r\n    // add new data to TimelineAndForm for new preset name\r\n    const newLabels = [...data.labels];\r\n    const newHours = [...data.hours];\r\n\r\n    newLabels.push([\"Wake Up\"]);\r\n    newHours.push([\"08:00\"]);\r\n\r\n    toastifyNotification(\"New Preset Added!\");\r\n\r\n    setData({ ...data, labels: newLabels, hours: newHours });\r\n    setPresetNames({ ...presetNames, presetNames: newPresets });\r\n\r\n    changesToLocalStorage(\r\n      { indexOfActiveDataset: 0, labels: newLabels, hours: newHours },\r\n      { ...presetNames, presetNames: newPresets }\r\n    );\r\n  };\r\n\r\n  const removeActivePreset = (e, index) => {\r\n    if (data.labels.length === 1) return;\r\n\r\n    let confirmReset = window.confirm(\r\n      \"Are you sure you want to remove this preset?\"\r\n    );\r\n    if (!confirmReset) return;\r\n\r\n    toastifyNotification(\"Remove was Successful!\");\r\n\r\n    // fitlers out the preset\r\n    const newPresetNames = presetNames.presetNames.filter((name, nameIndex) => {\r\n      return nameIndex != index;\r\n    });\r\n\r\n    const newLabels = [...data.labels];\r\n    const newHours = [...data.hours];\r\n\r\n    newLabels.splice(index, 1);\r\n    newHours.splice(index, 1);\r\n\r\n    setData({ indexOfActiveDataset: 0, labels: newLabels, hours: newHours });\r\n    setPresetNames({ ...presetNames, presetNames: newPresetNames });\r\n\r\n    changesToLocalStorage(\r\n      { indexOfActiveDataset: 0, labels: newLabels, hours: newHours },\r\n      { ...presetNames, presetNames: newPresetNames }\r\n    );\r\n  };\r\n\r\n  const resetPresets = (e) => {\r\n    let confirmReset = window.confirm(\r\n      \"Are you sure you want to reset all of the presets?\"\r\n    );\r\n\r\n    if (!confirmReset) return;\r\n\r\n    toastifyNotification(\"Reset was Successful!\");\r\n\r\n    setData({ ...INITIAL_DATA_STATE });\r\n    setPresetNames({\r\n      ...INITIAL_PRESET_STATE,\r\n    });\r\n\r\n    changesToLocalStorage(\r\n      { ...INITIAL_DATA_STATE },\r\n      { ...INITIAL_PRESET_STATE }\r\n    );\r\n  };\r\n\r\n  // toastify notification\r\n  const toastifyNotification = (notificationText) => {\r\n    toast(notificationText, {\r\n      theme: \"dark\",\r\n      autoClose: 2000,\r\n    });\r\n\r\n    // removes toast queue if exists\r\n    toast.clearWaitingQueue();\r\n  };\r\n\r\n  const onActivitiesChange = (e, index) => {\r\n    const newValue = e.target.value;\r\n    const name = e.target.name;\r\n\r\n    if (name === \"label\") {\r\n      // maps and returns everything as normal except when new indexOfItem matches index of the array changing then return the new newDataArray\r\n      const newData = data.labels[indexOfActiveDataset].map(\r\n        (dataItem, indexOfItem) => {\r\n          return indexOfItem === index ? newValue : dataItem;\r\n        }\r\n      );\r\n\r\n      const newLabels = data.labels.map((labels, index) => {\r\n        if (index == indexOfActiveDataset) return newData;\r\n        else return labels;\r\n      });\r\n\r\n      // sets new labels\r\n      setData({ ...data, labels: newLabels });\r\n\r\n      changesToLocalStorage(\r\n        { ...data, indexOfActiveDataset: 0, labels: newLabels },\r\n        { ...presetNames }\r\n      );\r\n    } else {\r\n      // maps and returns everything as normal except when new indexOfItem matches index of the array changing then return the new newDataArray\r\n      const newData = data.hours[indexOfActiveDataset].map(\r\n        (dataItem, indexOfItem) => {\r\n          return indexOfItem === index ? newValue : dataItem;\r\n        }\r\n      );\r\n\r\n      const newHours = data.hours.map((hours, index) => {\r\n        if (index == indexOfActiveDataset) return newData;\r\n        else return hours;\r\n      });\r\n\r\n      // sets new labels\r\n      setData({ ...data, hours: newHours });\r\n\r\n      changesToLocalStorage(\r\n        { ...data, indexOfActiveDataset: 0, hours: newHours },\r\n        { ...presetNames }\r\n      );\r\n    }\r\n  };\r\n\r\n  const addActivity = (e) => {\r\n    // copying currently active data and adding new element to data\r\n    const newLabels = [...data.labels[indexOfActiveDataset]];\r\n    const newHours = [...data.hours[indexOfActiveDataset]];\r\n\r\n    newLabels.push(\"New Activity\");\r\n    newHours.push(\"00:00\");\r\n\r\n    // if index matches indexOfActiveDataset in state then return new data else return old\r\n    const updatedLabels = data.labels.map((labels, index) => {\r\n      if (index == indexOfActiveDataset) return newLabels;\r\n      return labels;\r\n    });\r\n\r\n    const updatedHours = data.hours.map((hours, index) => {\r\n      if (index == indexOfActiveDataset) return newHours;\r\n      return hours;\r\n    });\r\n\r\n    // update dataset\r\n    setData({ ...data, labels: updatedLabels, hours: updatedHours });\r\n\r\n    changesToLocalStorage(\r\n      { indexOfActiveDataset: 0, labels: updatedLabels, hours: updatedHours },\r\n      { ...presetNames }\r\n    );\r\n  };\r\n\r\n  const removeSpecificActivity = (e, index) => {\r\n    if (data.labels.length === 1) {\r\n      return;\r\n    }\r\n    // labels and hours\r\n    const labels = [...data.labels];\r\n    const hours = [...data.hours];\r\n\r\n    // when clicked access closest svg then get parent of it to receive array of children nodes which are the inputs we want to access\r\n    const closestSvg = e.target.closest(\"div\");\r\n    const formInputRow = closestSvg.parentNode;\r\n    const formInputRowChildern = formInputRow.children;\r\n    // values of the inputs we want to access\r\n    const formLabelValue = formInputRowChildern[0].value;\r\n    const formHourValue = formInputRowChildern[1].value;\r\n\r\n    // gets new data from inputs and filters out from array\r\n    const newLabels = labels[indexOfActiveDataset].filter((label, index) => {\r\n      const currentLabel = labels[indexOfActiveDataset][index];\r\n      const currentHour = hours[indexOfActiveDataset][index];\r\n      if (currentLabel == formLabelValue && currentHour == formHourValue) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    // gets new data from inputs and filters out from array\r\n    const newHours = hours[indexOfActiveDataset].filter((hour, index) => {\r\n      const currentLabel = labels[indexOfActiveDataset][index];\r\n      const currentHour = hours[indexOfActiveDataset][index];\r\n      if (currentLabel == formLabelValue && currentHour == formHourValue) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    // if index matches indexOfActiveDataset in state then return new data else return old\r\n    const updatedLabels = data.labels.map((labels, index) => {\r\n      if (index == indexOfActiveDataset) return newLabels;\r\n      return labels;\r\n    });\r\n\r\n    const updatedHours = data.hours.map((hours, index) => {\r\n      if (index == indexOfActiveDataset) return newHours;\r\n      return hours;\r\n    });\r\n\r\n    // // set form data to new arrays\r\n    setData({ ...data, labels: updatedLabels, hours: updatedHours });\r\n\r\n    changesToLocalStorage(\r\n      { indexOfActiveDataset: 0, labels: updatedLabels, hours: updatedHours },\r\n      { ...presetNames }\r\n    );\r\n  };\r\n\r\n  const resetActivites = () => {\r\n    // new dataset to update to\r\n    const updatedLabels = [\"New Activity\"];\r\n    const updatedHours = [\"00:00\"];\r\n\r\n    // if label and hour matches the one reseting and are in the same index then update array item. return as normal for the rest\r\n    const newLabels = data.labels.map((label, index) => {\r\n      if (index == indexOfActiveDataset) return updatedLabels;\r\n      return label;\r\n    });\r\n\r\n    const newHours = data.hours.map((hours, index) => {\r\n      if (index == indexOfActiveDataset) return updatedHours;\r\n      return hours;\r\n    });\r\n\r\n    setData({ ...data, labels: newLabels, hours: newHours });\r\n\r\n    changesToLocalStorage(\r\n      { indexOfActiveDataset: 0, labels: newLabels, hours: newHours },\r\n      { ...presetNames }\r\n    );\r\n  };\r\n\r\n  const onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    toastifyNotification(\"Submitted Updates!\");\r\n\r\n    changesToLocalStorage(\r\n      { ...data, indexOfActiveDataset: 0 },\r\n      { ...presetNames }\r\n    );\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"timeline-form-form-container\">\r\n        <form onSubmit={onFormSubmit} className=\"timeline-form-form\">\r\n          {hide ? (\r\n            <p>Hidden...</p>\r\n          ) : (\r\n            <>\r\n              <div className=\"timeline-preset-content-container\">\r\n                <div className=\"timeline-presets\">\r\n                  {presetNames.presetNames.map((preset, index) => {\r\n                    // adds preset-active class only if first item of array, else don't add to class list\r\n                    let presetActiveFirstItem = true;\r\n\r\n                    if (index != 0) {\r\n                      presetActiveFirstItem = false;\r\n                    }\r\n\r\n                    return (\r\n                      <div className=\"timeline-preset-div\" key={index}>\r\n                        <Tippy\r\n                          content=\"Double click to change preset name\"\r\n                          className=\"timeline-preset-div-tippy\"\r\n                          arrow={false}\r\n                        >\r\n                          <p\r\n                            className={`${\r\n                              minimize\r\n                                ? \"timeline-preset minimize-form-preset\"\r\n                                : \"timeline-preset\"\r\n                            } ${presetActiveFirstItem ? \"preset-active\" : \"\"}`}\r\n                            onClick={(e, ind) => {\r\n                              activePreset(e, index);\r\n                            }}\r\n                            onDoubleClick={(e, ind) => {\r\n                              onPresetNameDoubleClick(e, index);\r\n                            }}\r\n                            name={preset}\r\n                          >\r\n                            {preset}\r\n                          </p>\r\n                        </Tippy>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n\r\n                {presetNames.changePresetName && (\r\n                  <div className=\"timeline-presets-name-change-container\">\r\n                    <input\r\n                      autoComplete=\"off\"\r\n                      type=\"text\"\r\n                      name=\"inputNameChangeValue\"\r\n                      value={presetNames.inputNameChangeValue}\r\n                      className=\"timeline-preset-name-change-input\"\r\n                      name=\"inputNameChangeValue\"\r\n                      placeholder=\"Max characters 10\"\r\n                      maxLength=\"10\"\r\n                      onChange={onPresetNameChange}\r\n                      // runs function if enter is clicked. Does nothing if clicked enter without this line\r\n                      onKeyPress={(e) => {\r\n                        e.key === \"Enter\" && onPresetNameChangeSubmit();\r\n                      }}\r\n                    />\r\n\r\n                    <div\r\n                      style={{\r\n                        position: \"relative\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                      }}\r\n                    >\r\n                      <AiOutlineCheck\r\n                        onClick={onPresetNameChangeSubmit}\r\n                        className=\"timeline-preset-name-change-submit timeline-preset-name-change-button\"\r\n                      />\r\n                      <AiOutlineClose\r\n                        onClick={onPresetNameClose}\r\n                        className=\"timeline-preset-name-change-delete timeline-preset-name-change-button\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"timeline-presets-buttons\">\r\n                  <button\r\n                    className={\r\n                      minimize\r\n                        ? \"timeline-preset-button minimize-timeline-preset-buttons\"\r\n                        : \"timeline-preset-button\"\r\n                    }\r\n                    type=\"button\"\r\n                    onClick={(e) => {\r\n                      addPreset(e);\r\n                    }}\r\n                  >\r\n                    ADD PRESET\r\n                  </button>\r\n\r\n                  <div style={{ display: \"flex\" }}>\r\n                    <button\r\n                      className={\r\n                        minimize\r\n                          ? \"timeline-preset-button minimize-timeline-preset-buttons\"\r\n                          : \"timeline-preset-button\"\r\n                      }\r\n                      type=\"button\"\r\n                      onClick={(e) => resetPresets(e)}\r\n                    >\r\n                      RESET PRESETS\r\n                    </button>\r\n\r\n                    <button\r\n                      className={\r\n                        minimize\r\n                          ? \"timeline-preset-button minimize-timeline-preset-buttons\"\r\n                          : \"timeline-preset-button\"\r\n                      }\r\n                      type=\"button\"\r\n                      onClick={(e) =>\r\n                        removeActivePreset(e, indexOfActiveDataset)\r\n                      }\r\n                    >\r\n                      REMOVE ACTIVE\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"timeline-form-inputs-container\">\r\n                <div\r\n                  className=\"timeline-form-inputs\"\r\n                  style={\r\n                    minimize ? { marginTop: \"5px\" } : { marginTop: \"10px\" }\r\n                  }\r\n                >\r\n                  {data.labels[indexOfActiveDataset].map((label, index) => {\r\n                    return (\r\n                      <div\r\n                        className={\r\n                          minimize\r\n                            ? \"form-inputs-row minimize-form\"\r\n                            : \"form-inputs-row\"\r\n                        }\r\n                        key={index}\r\n                      >\r\n                        <input\r\n                          className={\r\n                            minimize\r\n                              ? \"timeline-form-input form-label minimize-form\"\r\n                              : \"timeline-form-input form-label\"\r\n                          }\r\n                          value={data.labels[indexOfActiveDataset][index]}\r\n                          name=\"label\"\r\n                          type=\"text\"\r\n                          autoComplete=\"off\"\r\n                          onChange={(e) => onActivitiesChange(e, index)}\r\n                          required\r\n                          // stops user from clicking enter on input. If removed creates new preset for whatever reason\r\n                          onKeyPress={(e) => {\r\n                            e.key === \"Enter\" && onFormSubmit(e);\r\n                          }}\r\n                        />\r\n\r\n                        <input\r\n                          className={\r\n                            minimize\r\n                              ? \"timeline-form-input form-hour minimize-form\"\r\n                              : \"timeline-form-input form-hour\"\r\n                          }\r\n                          value={data.hours[indexOfActiveDataset][index]}\r\n                          name=\"hour\"\r\n                          type=\"time\"\r\n                          onChange={(e) => onActivitiesChange(e, index)}\r\n                          required\r\n                          // stops user from clicking enter on input. If removed creates new preset for whatever reason\r\n                          onKeyPress={(e) => {\r\n                            e.key === \"Enter\" && onFormSubmit(e);\r\n                          }}\r\n                        />\r\n\r\n                        <div\r\n                          className=\"form-delete\"\r\n                          onClick={(e) => {\r\n                            toastifyNotification(\"Remove was Successful!\");\r\n                            removeSpecificActivity(e, index);\r\n                          }}\r\n                        >\r\n                          x\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-buttons\">\r\n                <ToastContainer limit=\"3\" />\r\n\r\n                <div className=\"form-extra-buttons\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className={\r\n                      minimize\r\n                        ? \"form-button minimize-form-button\"\r\n                        : \"form-button\"\r\n                    }\r\n                  >\r\n                    SUBMIT ACTIVITIES\r\n                  </button>\r\n                  <div style={{ display: \"flex\" }}>\r\n                    <button\r\n                      className={\r\n                        minimize\r\n                          ? \"form-button minimize-form-button\"\r\n                          : \"form-button\"\r\n                      }\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        toastifyNotification(\"New Activity Added!\");\r\n                        addActivity();\r\n                      }}\r\n                    >\r\n                      ADD ACTIVITY\r\n                    </button>\r\n\r\n                    <button\r\n                      className={\r\n                        minimize\r\n                          ? \"form-button minimize-form-button\"\r\n                          : \"form-button\"\r\n                      }\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        toastifyNotification(\"Reset was Successful!\");\r\n                        resetActivites();\r\n                      }}\r\n                    >\r\n                      RESET ACTIVITIES\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </form>\r\n\r\n        <p className=\"form-extras\">\r\n          <span\r\n            className=\"form-extra extra-form-minimize\"\r\n            onClick={minimizeForm}\r\n          >\r\n            {minimize ? \"Expand\" : \"Minimize\"}\r\n          </span>\r\n          |\r\n          <span className=\"form-extra extra-form-hide\" onClick={hideForm}>\r\n            {hide ? \"Display\" : \"Hide\"}\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// function to customize colors, because i can\r\nfunction CustomizeDataColor({}) {\r\n  return (\r\n    <div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimelineAndForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nimport { AiOutlinePlusCircle, AiOutlineMinusCircle } from \"react-icons/ai\";\r\nimport { IconContext } from \"react-icons/lib\";\r\n\r\n// All code from here and scss file came from other project which is why classNames are quite different than the rest\r\n\r\nfunction Tips() {\r\n  useEffect(() => {\r\n    const setFaqHeight = () => {\r\n      const faqItem = document.getElementsByClassName(\"faq-item\");\r\n      const faqItemHeader = document.getElementsByClassName(\"faq-item-header\");\r\n\r\n      for (let i = 0; i < faqItem.length; i++) {\r\n        const headerHeight = faqItemHeader[i].offsetHeight;\r\n\r\n        faqItem[i].style.height = headerHeight + \"px\";\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"resize\", setFaqHeight);\r\n\r\n    setFaqHeight();\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", setFaqHeight);\r\n    };\r\n  }, []);\r\n  return (\r\n    <section className=\"faq-route\">\r\n      <div className=\"faq-route-wrapper container\">\r\n        <h2 className=\"section-header\">Tips</h2>\r\n        <div className=\"header-line\"></div>\r\n        <div className=\"header-line\"></div>\r\n\r\n        <p className=\"faq-route-description section-description\">\r\n          <b>Click on each one </b>for a short description of how to implement\r\n          these tips for time management!\r\n        </p>\r\n\r\n        <p className=\"faq-route-description section-description\">\r\n          Tips to help manage your time\r\n        </p>\r\n\r\n        <div className=\"faq-route-items\">\r\n          <ul className=\"faq-route-items-ul\">\r\n            <FrequentlyAskedItem\r\n              question=\"Set Goals\"\r\n              answer=\"Set goals for yourself whether short term goals or long term goals. Set a master list of something you want to accomplish for a long\r\n              period of time as well as set short term daily goals that you can accomplish in the day. Set goals that are acheivable and prioritize these goals\r\n              in your long term as well as daily life.\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Manage your time\"\r\n              answer=\"As important as goals are there are going to be multiple goals you're going to need to accomplish for the day. \r\n              Set the time aside out of your day to do them. Set an appropriate time to do these goals and make sure they get done within that time frame. \r\n              The objective is to get the goals done in a timely manner in order to move onto your next till all goals are accomplished for the day.\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Organize how you're going to do everything\"\r\n              answer=\"A website like this is perfect but use whichever is more convenient whether it being this application or just simply pen and paper.\r\n              Write down what you need to do and within what time you need to get it done. Don't assume you're going to remember everything you need to do\r\n              and at what time as it's going to not only confuse you but cause unnecessary stress on you. Start your day off with writing what needs to get done for\r\n              the day or even better do it the night before! Have your daily as well as have your master list of goals and tweak them whenever necessary\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Take breaks\"\r\n              answer=\"Taking breaks can do so much for one's productivity just make sure to take the breaks wisely. A couple minutes of break to take your mind\r\n              off all the work should be not only sufficient but relaxing as you take a bit of time to refocus on the work that needs to get done. Take them\r\n              whenever you think is needed just make sure you don't make the mistake of transforming these strategic breaks into procrastination. Attention span\r\n              can be a problem for some and these make a big difference to not only help with attention span but also the not feeling overworked.\"\r\n            />\r\n          </ul>\r\n        </div>\r\n\r\n        <p className=\"faq-route-description section-description\">\r\n          Benefits of time management\r\n        </p>\r\n        <div className=\"faq-route-items\">\r\n          <ul className=\"faq-route-items-ul\">\r\n            <FrequentlyAskedItem\r\n              question=\"Stress relief\"\r\n              answer=\"Setting goals and completing them not only helps reduce anxiety but you also get to see the progess your making by checking or crossing\r\n              things off your list of goals.\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Daily progress\"\r\n              answer=\"Progress is important as it helps reach your goals. Daily progress in a timely manner not only helps you reach your goals faster\r\n              but does so in a manner that's manageable and productive so you can reach your goals as soon as possible!\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"More Time\"\r\n              answer=\"With time management you save yourself so much time! With good time management you can get the troublesome things out of the way and\r\n              start focusing on things you enjoy doing such as hobbies or going out with family and friends.\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Better habits\"\r\n              answer=\"When managing time it starts to become a healthy habit as it helps focus on priorities as well as helps with productivity done during the day.\"\r\n            />\r\n          </ul>\r\n        </div>\r\n\r\n        <p className=\"faq-route-description section-description\">\r\n          Consequences of poor time management\r\n        </p>\r\n        <div className=\"faq-route-items\">\r\n          <ul className=\"faq-route-items-ul\">\r\n            <FrequentlyAskedItem\r\n              question=\"Potential stress and anxiety\"\r\n              answer=\"When not completing goals for example a school essay or not getting your clothes ready you then have to do it all last minute which\r\n              causes stress, anxiety, and tension that starts to build up. With time management you not only reduce that stress but you give yourself more time\r\n              for example on the weekend to go out as oppose to stuck at home writing a last minute essay or doing laundry.\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Wasted Time\"\r\n              answer=\"Focusing on a task means complete focus until it gets done. Scrolling through social media or watching a show in the background can \r\n              cause your task to take double the time than you originally needed.\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Bad Habits\"\r\n              answer=\"If you constantly wait last minute to do something you begin to realize it wasn't a one time thing. It constantly happen which causes\r\n              bad habits to do things last minute which causes in hampered work.\"\r\n            />\r\n            <FrequentlyAskedItem\r\n              question=\"Less time to relax\"\r\n              answer=\"With so many things to do there needs to be time for you to relax but if spending more time than needed on a task then it removes the\r\n              time to relax. Scheduling when to do things and focusing on those things lets you completely focus on what needs to get done at hand.\"\r\n            />\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction FrequentlyAskedItem({ question, answer }) {\r\n  const [selected, setSelected] = useState(false);\r\n\r\n  // event is click event\r\n  const changeSelected = (event) => {\r\n    setSelected(!selected);\r\n\r\n    // Looks for closest elements with these classes to toggle height when clicked\r\n    const faqItem = event.target.closest(\".faq-item\");\r\n    const faqItemHeader = event.target.closest(\".faq-item-header\");\r\n    const faqItemExtend = event.target\r\n      .closest(\".faq-item\")\r\n      .querySelector(\".faq-item-extend\");\r\n\r\n    const headerHeight = faqItemHeader.offsetHeight;\r\n    const extendHeight = faqItemExtend.offsetHeight;\r\n\r\n    // When faqItem is clicked toggle height to show or hide content\r\n    // Change height from header to header+answer height then toggle back and forth\r\n    if (!selected) {\r\n      const extendedHeight = headerHeight + extendHeight;\r\n      faqItem.style.height = extendedHeight + 16 + \"px\";\r\n    } else {\r\n      faqItem.style.height = headerHeight + \"px\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // When browser resizes this closes all faq items\r\n    const selectedFalse = () => setSelected(false);\r\n\r\n    window.addEventListener(\"resize\", selectedFalse);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", selectedFalse);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <IconContext.Provider value={{ className: \"faq-item-icon\" }}>\r\n      <li className={selected ? \"faq-item selected\" : \"faq-item\"}>\r\n        <div\r\n          className=\"faq-item-header\"\r\n          onClick={(event) => {\r\n            changeSelected(event);\r\n          }}\r\n        >\r\n          {selected ? <AiOutlineMinusCircle /> : <AiOutlinePlusCircle />}\r\n          <p className=\"faq-item-question\">{question}</p>\r\n        </div>\r\n\r\n        <div className=\"faq-item-extend\">\r\n          <p className=\"faq-item-answer\">{answer}</p>\r\n        </div>\r\n      </li>\r\n    </IconContext.Provider>\r\n  );\r\n}\r\n\r\nexport default Tips;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"container\">\r\n        <div className=\"footer-section\">\r\n          <p>Time Management</p>\r\n        </div>\r\n        <div className=\"footer-section\">\r\n          <p>© 2021</p>\r\n        </div>\r\n        <div className=\"footer-section\">\r\n          <p>Matthew Jimenez</p>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\n\nimport Navbar from \"./components/Navbar/Navbar\";\nimport TimelineAndForm from \"./components//TimelineAndForm/TimelineAndForm\";\nimport Tips from \"./components/Tips/Tips\";\nimport Footer from \"./components/Footer/Footer\";\nimport \"./styles.scss\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  // if true light them, else dark theme\n  const [darkTheme, setTheme] = useState(true);\n\n  const onThemeChange = () => setTheme(!darkTheme);\n\n  return (\n    <Router basename=\"/time-management-app\">\n      <div className=\"container\">\n        <div className=\"no-footer-content\">\n          <div className=\"App\">\n            <Navbar darkTheme={darkTheme} onThemeChange={onThemeChange} />\n            <div className=\"no-footer-navbar-content\">\n              <Routes>\n                <Route exact path=\"/\" element={<TimelineAndForm />} />\n                <Route path=\"/tips\" element={<Tips />} />\n              </Routes>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}